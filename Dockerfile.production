FROM node:17.3.1-alpine AS builder

# Create app directory
WORKDIR /app

COPY package*.json ./

# node-gyp dependencies
# RUN apk add --update python make g++ && rm -rf /var/cache/apk/*

# Install dependencies from package-lock.json
RUN npm ci --no-audit --no-fund

COPY . .

RUN npm run build

# Remove the packages specified in devDependencie
RUN npm prune --production

# By using the FROM statement again, we are telling Docker that it should create a new,
# fresh image without any connection to the previous one.
FROM node:17.3.1-alpine AS build

# Create app directory
WORKDIR /app

COPY package*.json ./

# Copy the built /dist folder from the builder image.
# This way we are only getting the /dist directory, without the devDependencies,
# installed in our final image.
COPY --from=builder /app .

ENV NPM_CONFIG_PREFIX=/home/node/.npm-global
ENV PATH=$PATH:/home/node/.npm-global/bin
ENV NODE_ENV=production
ENV PORT=8085
ENV LOG_NAME=hive-graph
ENV LOG_LEVEL=debug
ENV THROTTLE_TTL=1
ENV THROTTLE_LIMIT=999999999
ENV GRAPHQL_DEBUG=true
ENV GRAPHQL_PLAYGROUND=true
ENV GRAPHQL_SORT_SCHEMA=true
ENV GRAPHQL_INTROSPECTION=true
ENV LEGACY_LCD_URL=http://167.172.181.107:1317
ENV LEGACY_CHAIN_ID=columbus-4
ENV LEGACY_LCD_MAX_HEIGHT=4724000
ENV LCD_URL=http://157.230.78.37:1317
ENV CHAIN_ID=columbus-5

ENTRYPOINT [ "npm", "run" ]
CMD ["start:prod"]
